// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: prodi.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ProdiService_GetAllProdi_FullMethodName    = "/tracer_study_grpc.ProdiService/GetAllProdi"
	ProdiService_GetAllFakultas_FullMethodName = "/tracer_study_grpc.ProdiService/GetAllFakultas"
	ProdiService_GetProdiByKode_FullMethodName = "/tracer_study_grpc.ProdiService/GetProdiByKode"
	ProdiService_CreateProdi_FullMethodName    = "/tracer_study_grpc.ProdiService/CreateProdi"
	ProdiService_UpdateProdi_FullMethodName    = "/tracer_study_grpc.ProdiService/UpdateProdi"
	ProdiService_DeleteProdi_FullMethodName    = "/tracer_study_grpc.ProdiService/DeleteProdi"
)

// ProdiServiceClient is the client API for ProdiService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProdiServiceClient interface {
	GetAllProdi(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetAllProdiResponse, error)
	GetAllFakultas(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetAllFakultasResponse, error)
	GetProdiByKode(ctx context.Context, in *GetProdiByKodeRequest, opts ...grpc.CallOption) (*GetProdiResponse, error)
	CreateProdi(ctx context.Context, in *Prodi, opts ...grpc.CallOption) (*GetProdiResponse, error)
	UpdateProdi(ctx context.Context, in *Prodi, opts ...grpc.CallOption) (*GetProdiResponse, error)
	DeleteProdi(ctx context.Context, in *GetProdiByKodeRequest, opts ...grpc.CallOption) (*DeleteProdiResponse, error)
}

type prodiServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProdiServiceClient(cc grpc.ClientConnInterface) ProdiServiceClient {
	return &prodiServiceClient{cc}
}

func (c *prodiServiceClient) GetAllProdi(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetAllProdiResponse, error) {
	out := new(GetAllProdiResponse)
	err := c.cc.Invoke(ctx, ProdiService_GetAllProdi_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *prodiServiceClient) GetAllFakultas(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetAllFakultasResponse, error) {
	out := new(GetAllFakultasResponse)
	err := c.cc.Invoke(ctx, ProdiService_GetAllFakultas_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *prodiServiceClient) GetProdiByKode(ctx context.Context, in *GetProdiByKodeRequest, opts ...grpc.CallOption) (*GetProdiResponse, error) {
	out := new(GetProdiResponse)
	err := c.cc.Invoke(ctx, ProdiService_GetProdiByKode_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *prodiServiceClient) CreateProdi(ctx context.Context, in *Prodi, opts ...grpc.CallOption) (*GetProdiResponse, error) {
	out := new(GetProdiResponse)
	err := c.cc.Invoke(ctx, ProdiService_CreateProdi_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *prodiServiceClient) UpdateProdi(ctx context.Context, in *Prodi, opts ...grpc.CallOption) (*GetProdiResponse, error) {
	out := new(GetProdiResponse)
	err := c.cc.Invoke(ctx, ProdiService_UpdateProdi_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *prodiServiceClient) DeleteProdi(ctx context.Context, in *GetProdiByKodeRequest, opts ...grpc.CallOption) (*DeleteProdiResponse, error) {
	out := new(DeleteProdiResponse)
	err := c.cc.Invoke(ctx, ProdiService_DeleteProdi_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProdiServiceServer is the server API for ProdiService service.
// All implementations must embed UnimplementedProdiServiceServer
// for forward compatibility
type ProdiServiceServer interface {
	GetAllProdi(context.Context, *emptypb.Empty) (*GetAllProdiResponse, error)
	GetAllFakultas(context.Context, *emptypb.Empty) (*GetAllFakultasResponse, error)
	GetProdiByKode(context.Context, *GetProdiByKodeRequest) (*GetProdiResponse, error)
	CreateProdi(context.Context, *Prodi) (*GetProdiResponse, error)
	UpdateProdi(context.Context, *Prodi) (*GetProdiResponse, error)
	DeleteProdi(context.Context, *GetProdiByKodeRequest) (*DeleteProdiResponse, error)
	mustEmbedUnimplementedProdiServiceServer()
}

// UnimplementedProdiServiceServer must be embedded to have forward compatible implementations.
type UnimplementedProdiServiceServer struct {
}

func (UnimplementedProdiServiceServer) GetAllProdi(context.Context, *emptypb.Empty) (*GetAllProdiResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllProdi not implemented")
}
func (UnimplementedProdiServiceServer) GetAllFakultas(context.Context, *emptypb.Empty) (*GetAllFakultasResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllFakultas not implemented")
}
func (UnimplementedProdiServiceServer) GetProdiByKode(context.Context, *GetProdiByKodeRequest) (*GetProdiResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProdiByKode not implemented")
}
func (UnimplementedProdiServiceServer) CreateProdi(context.Context, *Prodi) (*GetProdiResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProdi not implemented")
}
func (UnimplementedProdiServiceServer) UpdateProdi(context.Context, *Prodi) (*GetProdiResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProdi not implemented")
}
func (UnimplementedProdiServiceServer) DeleteProdi(context.Context, *GetProdiByKodeRequest) (*DeleteProdiResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProdi not implemented")
}
func (UnimplementedProdiServiceServer) mustEmbedUnimplementedProdiServiceServer() {}

// UnsafeProdiServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProdiServiceServer will
// result in compilation errors.
type UnsafeProdiServiceServer interface {
	mustEmbedUnimplementedProdiServiceServer()
}

func RegisterProdiServiceServer(s grpc.ServiceRegistrar, srv ProdiServiceServer) {
	s.RegisterService(&ProdiService_ServiceDesc, srv)
}

func _ProdiService_GetAllProdi_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProdiServiceServer).GetAllProdi(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProdiService_GetAllProdi_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProdiServiceServer).GetAllProdi(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProdiService_GetAllFakultas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProdiServiceServer).GetAllFakultas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProdiService_GetAllFakultas_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProdiServiceServer).GetAllFakultas(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProdiService_GetProdiByKode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProdiByKodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProdiServiceServer).GetProdiByKode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProdiService_GetProdiByKode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProdiServiceServer).GetProdiByKode(ctx, req.(*GetProdiByKodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProdiService_CreateProdi_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Prodi)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProdiServiceServer).CreateProdi(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProdiService_CreateProdi_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProdiServiceServer).CreateProdi(ctx, req.(*Prodi))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProdiService_UpdateProdi_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Prodi)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProdiServiceServer).UpdateProdi(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProdiService_UpdateProdi_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProdiServiceServer).UpdateProdi(ctx, req.(*Prodi))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProdiService_DeleteProdi_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProdiByKodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProdiServiceServer).DeleteProdi(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProdiService_DeleteProdi_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProdiServiceServer).DeleteProdi(ctx, req.(*GetProdiByKodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ProdiService_ServiceDesc is the grpc.ServiceDesc for ProdiService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProdiService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tracer_study_grpc.ProdiService",
	HandlerType: (*ProdiServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAllProdi",
			Handler:    _ProdiService_GetAllProdi_Handler,
		},
		{
			MethodName: "GetAllFakultas",
			Handler:    _ProdiService_GetAllFakultas_Handler,
		},
		{
			MethodName: "GetProdiByKode",
			Handler:    _ProdiService_GetProdiByKode_Handler,
		},
		{
			MethodName: "CreateProdi",
			Handler:    _ProdiService_CreateProdi_Handler,
		},
		{
			MethodName: "UpdateProdi",
			Handler:    _ProdiService_UpdateProdi_Handler,
		},
		{
			MethodName: "DeleteProdi",
			Handler:    _ProdiService_DeleteProdi_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "prodi.proto",
}
