// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: mhsbiodataapi.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	MhsBiodataApiService_FetchMhsBiodataByNim_FullMethodName = "/tracer_study_grpc.MhsBiodataApiService/FetchMhsBiodataByNim"
	MhsBiodataApiService_CheckMhsAlumni_FullMethodName       = "/tracer_study_grpc.MhsBiodataApiService/CheckMhsAlumni"
)

// MhsBiodataApiServiceClient is the client API for MhsBiodataApiService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MhsBiodataApiServiceClient interface {
	FetchMhsBiodataByNim(ctx context.Context, in *MhsBiodataApiRequest, opts ...grpc.CallOption) (*MhsBiodataApiResponse, error)
	CheckMhsAlumni(ctx context.Context, in *MhsBiodataApiRequest, opts ...grpc.CallOption) (*CheckMhsAlumniResponse, error)
}

type mhsBiodataApiServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMhsBiodataApiServiceClient(cc grpc.ClientConnInterface) MhsBiodataApiServiceClient {
	return &mhsBiodataApiServiceClient{cc}
}

func (c *mhsBiodataApiServiceClient) FetchMhsBiodataByNim(ctx context.Context, in *MhsBiodataApiRequest, opts ...grpc.CallOption) (*MhsBiodataApiResponse, error) {
	out := new(MhsBiodataApiResponse)
	err := c.cc.Invoke(ctx, MhsBiodataApiService_FetchMhsBiodataByNim_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mhsBiodataApiServiceClient) CheckMhsAlumni(ctx context.Context, in *MhsBiodataApiRequest, opts ...grpc.CallOption) (*CheckMhsAlumniResponse, error) {
	out := new(CheckMhsAlumniResponse)
	err := c.cc.Invoke(ctx, MhsBiodataApiService_CheckMhsAlumni_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MhsBiodataApiServiceServer is the server API for MhsBiodataApiService service.
// All implementations must embed UnimplementedMhsBiodataApiServiceServer
// for forward compatibility
type MhsBiodataApiServiceServer interface {
	FetchMhsBiodataByNim(context.Context, *MhsBiodataApiRequest) (*MhsBiodataApiResponse, error)
	CheckMhsAlumni(context.Context, *MhsBiodataApiRequest) (*CheckMhsAlumniResponse, error)
	mustEmbedUnimplementedMhsBiodataApiServiceServer()
}

// UnimplementedMhsBiodataApiServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMhsBiodataApiServiceServer struct {
}

func (UnimplementedMhsBiodataApiServiceServer) FetchMhsBiodataByNim(context.Context, *MhsBiodataApiRequest) (*MhsBiodataApiResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchMhsBiodataByNim not implemented")
}
func (UnimplementedMhsBiodataApiServiceServer) CheckMhsAlumni(context.Context, *MhsBiodataApiRequest) (*CheckMhsAlumniResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckMhsAlumni not implemented")
}
func (UnimplementedMhsBiodataApiServiceServer) mustEmbedUnimplementedMhsBiodataApiServiceServer() {}

// UnsafeMhsBiodataApiServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MhsBiodataApiServiceServer will
// result in compilation errors.
type UnsafeMhsBiodataApiServiceServer interface {
	mustEmbedUnimplementedMhsBiodataApiServiceServer()
}

func RegisterMhsBiodataApiServiceServer(s grpc.ServiceRegistrar, srv MhsBiodataApiServiceServer) {
	s.RegisterService(&MhsBiodataApiService_ServiceDesc, srv)
}

func _MhsBiodataApiService_FetchMhsBiodataByNim_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MhsBiodataApiRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MhsBiodataApiServiceServer).FetchMhsBiodataByNim(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MhsBiodataApiService_FetchMhsBiodataByNim_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MhsBiodataApiServiceServer).FetchMhsBiodataByNim(ctx, req.(*MhsBiodataApiRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MhsBiodataApiService_CheckMhsAlumni_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MhsBiodataApiRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MhsBiodataApiServiceServer).CheckMhsAlumni(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MhsBiodataApiService_CheckMhsAlumni_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MhsBiodataApiServiceServer).CheckMhsAlumni(ctx, req.(*MhsBiodataApiRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MhsBiodataApiService_ServiceDesc is the grpc.ServiceDesc for MhsBiodataApiService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MhsBiodataApiService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tracer_study_grpc.MhsBiodataApiService",
	HandlerType: (*MhsBiodataApiServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FetchMhsBiodataByNim",
			Handler:    _MhsBiodataApiService_FetchMhsBiodataByNim_Handler,
		},
		{
			MethodName: "CheckMhsAlumni",
			Handler:    _MhsBiodataApiService_CheckMhsAlumni_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mhsbiodataapi.proto",
}
