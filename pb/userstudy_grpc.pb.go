// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: userstudy.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	UserStudyService_GetAllUserStudy_FullMethodName   = "/tracer_study_grpc.UserStudyService/GetAllUserStudy"
	UserStudyService_GetUserStudyByNim_FullMethodName = "/tracer_study_grpc.UserStudyService/GetUserStudyByNim"
	UserStudyService_CreateUserStudy_FullMethodName   = "/tracer_study_grpc.UserStudyService/CreateUserStudy"
	UserStudyService_UpdateUserStudy_FullMethodName   = "/tracer_study_grpc.UserStudyService/UpdateUserStudy"
	UserStudyService_ExportUSReport_FullMethodName    = "/tracer_study_grpc.UserStudyService/ExportUSReport"
)

// UserStudyServiceClient is the client API for UserStudyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserStudyServiceClient interface {
	GetAllUserStudy(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*MultipleUserStudyResponse, error)
	GetUserStudyByNim(ctx context.Context, in *GetUserStudyByNimRequest, opts ...grpc.CallOption) (*SingleUserStudyResponse, error)
	CreateUserStudy(ctx context.Context, in *UserStudy, opts ...grpc.CallOption) (*SingleUserStudyResponse, error)
	UpdateUserStudy(ctx context.Context, in *UserStudy, opts ...grpc.CallOption) (*SingleUserStudyResponse, error)
	ExportUSReport(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ExportUSReportResponse, error)
}

type userStudyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserStudyServiceClient(cc grpc.ClientConnInterface) UserStudyServiceClient {
	return &userStudyServiceClient{cc}
}

func (c *userStudyServiceClient) GetAllUserStudy(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*MultipleUserStudyResponse, error) {
	out := new(MultipleUserStudyResponse)
	err := c.cc.Invoke(ctx, UserStudyService_GetAllUserStudy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userStudyServiceClient) GetUserStudyByNim(ctx context.Context, in *GetUserStudyByNimRequest, opts ...grpc.CallOption) (*SingleUserStudyResponse, error) {
	out := new(SingleUserStudyResponse)
	err := c.cc.Invoke(ctx, UserStudyService_GetUserStudyByNim_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userStudyServiceClient) CreateUserStudy(ctx context.Context, in *UserStudy, opts ...grpc.CallOption) (*SingleUserStudyResponse, error) {
	out := new(SingleUserStudyResponse)
	err := c.cc.Invoke(ctx, UserStudyService_CreateUserStudy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userStudyServiceClient) UpdateUserStudy(ctx context.Context, in *UserStudy, opts ...grpc.CallOption) (*SingleUserStudyResponse, error) {
	out := new(SingleUserStudyResponse)
	err := c.cc.Invoke(ctx, UserStudyService_UpdateUserStudy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userStudyServiceClient) ExportUSReport(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ExportUSReportResponse, error) {
	out := new(ExportUSReportResponse)
	err := c.cc.Invoke(ctx, UserStudyService_ExportUSReport_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserStudyServiceServer is the server API for UserStudyService service.
// All implementations must embed UnimplementedUserStudyServiceServer
// for forward compatibility
type UserStudyServiceServer interface {
	GetAllUserStudy(context.Context, *emptypb.Empty) (*MultipleUserStudyResponse, error)
	GetUserStudyByNim(context.Context, *GetUserStudyByNimRequest) (*SingleUserStudyResponse, error)
	CreateUserStudy(context.Context, *UserStudy) (*SingleUserStudyResponse, error)
	UpdateUserStudy(context.Context, *UserStudy) (*SingleUserStudyResponse, error)
	ExportUSReport(context.Context, *emptypb.Empty) (*ExportUSReportResponse, error)
	mustEmbedUnimplementedUserStudyServiceServer()
}

// UnimplementedUserStudyServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUserStudyServiceServer struct {
}

func (UnimplementedUserStudyServiceServer) GetAllUserStudy(context.Context, *emptypb.Empty) (*MultipleUserStudyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllUserStudy not implemented")
}
func (UnimplementedUserStudyServiceServer) GetUserStudyByNim(context.Context, *GetUserStudyByNimRequest) (*SingleUserStudyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserStudyByNim not implemented")
}
func (UnimplementedUserStudyServiceServer) CreateUserStudy(context.Context, *UserStudy) (*SingleUserStudyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUserStudy not implemented")
}
func (UnimplementedUserStudyServiceServer) UpdateUserStudy(context.Context, *UserStudy) (*SingleUserStudyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserStudy not implemented")
}
func (UnimplementedUserStudyServiceServer) ExportUSReport(context.Context, *emptypb.Empty) (*ExportUSReportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExportUSReport not implemented")
}
func (UnimplementedUserStudyServiceServer) mustEmbedUnimplementedUserStudyServiceServer() {}

// UnsafeUserStudyServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserStudyServiceServer will
// result in compilation errors.
type UnsafeUserStudyServiceServer interface {
	mustEmbedUnimplementedUserStudyServiceServer()
}

func RegisterUserStudyServiceServer(s grpc.ServiceRegistrar, srv UserStudyServiceServer) {
	s.RegisterService(&UserStudyService_ServiceDesc, srv)
}

func _UserStudyService_GetAllUserStudy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserStudyServiceServer).GetAllUserStudy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserStudyService_GetAllUserStudy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserStudyServiceServer).GetAllUserStudy(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserStudyService_GetUserStudyByNim_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserStudyByNimRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserStudyServiceServer).GetUserStudyByNim(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserStudyService_GetUserStudyByNim_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserStudyServiceServer).GetUserStudyByNim(ctx, req.(*GetUserStudyByNimRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserStudyService_CreateUserStudy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserStudy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserStudyServiceServer).CreateUserStudy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserStudyService_CreateUserStudy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserStudyServiceServer).CreateUserStudy(ctx, req.(*UserStudy))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserStudyService_UpdateUserStudy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserStudy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserStudyServiceServer).UpdateUserStudy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserStudyService_UpdateUserStudy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserStudyServiceServer).UpdateUserStudy(ctx, req.(*UserStudy))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserStudyService_ExportUSReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserStudyServiceServer).ExportUSReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserStudyService_ExportUSReport_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserStudyServiceServer).ExportUSReport(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// UserStudyService_ServiceDesc is the grpc.ServiceDesc for UserStudyService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserStudyService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tracer_study_grpc.UserStudyService",
	HandlerType: (*UserStudyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAllUserStudy",
			Handler:    _UserStudyService_GetAllUserStudy_Handler,
		},
		{
			MethodName: "GetUserStudyByNim",
			Handler:    _UserStudyService_GetUserStudyByNim_Handler,
		},
		{
			MethodName: "CreateUserStudy",
			Handler:    _UserStudyService_CreateUserStudy_Handler,
		},
		{
			MethodName: "UpdateUserStudy",
			Handler:    _UserStudyService_UpdateUserStudy_Handler,
		},
		{
			MethodName: "ExportUSReport",
			Handler:    _UserStudyService_ExportUSReport_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "userstudy.proto",
}
